// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  students  Student[]
  faculties Faculty[]
  courses   Course[]
}

model Student {
  id           Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  rollNumber   String       @unique
  dob          DateTime
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId Int
  address      String?
  enrollments  Enrollment[]
  profile      Profile?     @relation(fields: [profileId], references: [id])
  profileId    Int?         @unique
}

model Faculty {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  designation  String?
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  courses      Course[]
}

model Course {
  id           Int          @id @default(autoincrement())
  title        String
  code         String       @unique
  credits      Int
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId Int
  faculty      Faculty?     @relation(fields: [facultyId], references: [id])
  facultyId    Int?
  enrollments  Enrollment[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  grade     String?
  semester  Int
  createdAt DateTime @default(now())

  @@unique([studentId, courseId])
}

model Profile {
  id       Int      @id @default(autoincrement())
  bio      String?
  phone    String?
  photoURL String?
  userRole Role     @default(STUDENT)
  student  Student?
}

model UserLogin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     Role
  meta     Json // for login metadata like IP, device, etc.
}
