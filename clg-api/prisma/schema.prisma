generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  courses   Course[]
  faculties Faculty[]
  students  Student[]
}

model Student {
  id           Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  rollNumber   String       @unique
  dob          DateTime
  departmentId Int
  address      String?
  profileId    Int?         @unique
  enrollments  Enrollment[]
  department   Department   @relation(fields: [departmentId], references: [id])
  profile      Profile?     @relation(fields: [profileId], references: [id])
}

model Faculty {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  designation  String?
  departmentId Int
  courses      Course[]
  department   Department @relation(fields: [departmentId], references: [id])
}

model Course {
  id           Int          @id @default(autoincrement())
  title        String
  code         String       @unique
  credits      Int
  departmentId Int
  facultyId    Int?
  department   Department   @relation(fields: [departmentId], references: [id])
  faculty      Faculty?     @relation(fields: [facultyId], references: [id])
  enrollments  Enrollment[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  courseId  Int
  grade     String?
  semester  Int
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId])
}

model Profile {
  id       Int      @id @default(autoincrement())
  bio      String?
  phone    String?
  photoURL String?
  userRole Role     @default(STUDENT)
  student  Student?
}

model User {
  id            String    @id
  name          String
  username      String   @map("username")
  displayUsername String @map("display_username")
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}




